<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">


    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
      
      <!--   <property name="sessionMode" value="native"/> -->
      
      <!--多realm 认证策略 -->
    <!--   <property name="authenticator" ref="authenticator"></property> -->
       <property name="realm" ref="jdbcRealm"/>
    </bean>
    
     <!--多realm 认证策略 
	<bean id="authenticator" 
    	class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
    	<property name="authenticationStrategy">
    		<bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
    	</property>
    </bean>-->
    
    <!-- 配置cacheManage -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

	<!-- 配置realms MD5加密-->
	<bean id="jdbcRealm" class="com.atguigu.crud.shiro.realms.ShiroRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
					<property name="hashAlgorithmName" value="MD5"></property>
					<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>
	<!--  配置realm sha1  加密 
	<bean id="secondRealm" class="com.atguigu.crud.shiro.realms.SecondRealm">
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
					<property name="hashAlgorithmName" value="SHA1"></property>
					<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean> -->
	<!-- 配置lifecycleBeanPostProcessor -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	<!-- 启用ioc容器中使用shiro的注解，但在配置了 lifecycleBeanPostProcessor才能用-->
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
   <!-- id必须和web。xml的shironame一致 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="login.html"/>
        <property name="successUrl" value="list.html"/>
        <property name="unauthorizedUrl" value="unauthorized.html"/>

		<!-- 配置那些页面需要受保护，以及访问这些页面访问的权限 
			1.anon 可以匿名访问
			2.authc 必须认证（登录）后才能访问的页面
			3 logout 登出
		-->
        <property name="filterChainDefinitions">
            <value>
            	/static/**= anon
                /login.html = anon
                /shiro/login.do  = anon
                /shiro/logout.do = logout
                
                /** = authc
            </value>
        </property>
    </bean>
</beans>
